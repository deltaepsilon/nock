isUser(uid) {auth.uid == uid}
isAdmin(environment) {true == root.child('nock').child(environment).child('user').child('read').child('account').child(auth.uid).child('isAdmin').val()}
isSubscriber(environment, type, key, auth) {true == root.child('nock').child(environment).child('user').child('read').child(type).child(auth.uid).child(key).val()}

path /nock/{environment}/public {
  read()  {true}
  write() {isAdmin(environment)}
}

path /nock/{environment}/user/owned/{object}/{uid} {
  read() {isUser(uid)}
  write() {isUser(uid)}
}
path /nock/{environment}/user/read/{object}/{uid} {
  read() {isUser(uid)}
}
path /nock/{environment}/user/write/{object}/{uid} {
  write() {isUser(uid)}
}
path /nock/{environment}/admin {
  read()  {isAdmin(environment)}
  write() {isAdmin(environment)}
}

path /nock/{environment}/content/all {
  read()  {isAdmin(environment)}
}

path /nock/{environment}/content {
  read()  {isAdmin(environment)}
}

path /nock/{environment}/content/{type}/{key} {
  read()  {isSubscriber(environment, type, key, auth) || isAdmin(environment)}
}

// Demo stuff. Delete for prod.
path /firebasePaginator {
  read() {true}
}
path /localFunctions {
  read() {true}
}
path /digits/logins/{uid} {
  read() {isUser(uid)}
  write() {isUser(uid)}
}